{"version":3,"sources":["_reset.scss","_global.scss","../../node_modules/susy/sass/susy/output/support/_rem.scss","../../node_modules/susy/sass/susy/language/susy/_container.scss","../../node_modules/susy/sass/susy/output/support/_clearfix.scss","style.css","_example.scss","../../node_modules/susy/sass/susy/language/susy/_span.scss","../../node_modules/susy/sass/susy/output/shared/_direction.scss","../../node_modules/susy/sass/susy/language/susy/_gutters.scss"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;EAaC,UAAU;EACV,WAAW;EACX,UAAU;EACV,gBAAgB;EAChB,cAAc;EACd,yBAAyB;CACzB;;AACD,iDAAiD;AACjD;;EAEC,eAAe;CACf;;AACD;EACC,eAAe;CACf;;AACD;EACC,iBAAiB;CACjB;;AACD;EACC,aAAa;CACb;;AACD;;EAEC,YAAY;EACZ,cAAc;CACd;;AACD;EACC,0BAA0B;EAC1B,kBAAkB;CAClB;;AAED;EACC,YAAY;EACZ,gBAAgB;EAChB,aAAa;CACb;;AAED;EACC,YAAY;EACZ,sBAAsB;EACtB,8BAAsB;EAAtB,sBAAsB;CAMtB;;AATD;EAME,gBAAgB;EAChB,eAAe;CACd;;AAGH;EACC,mBAAmB;EACnB,uBAAuB;EACvB,YAAY;CACZ;;AAED;;;;EAIG,mBAAmB;EACnB,oBAAoB;CACtB;;AAED;EACG,gBAAgB;EAChB,kBAAkB;CACpB;;AAED;EACG,gBAAgB;EAChB,kBAAkB;CACpB;;AAED;EACG,gBAAgB;EAChB,kBAAkB;CACpB;;AAED;EACG,gBAAgB;EAChB,kBAAkB;CACpB;;AAED;EACG,gBAAgB;EAChB,kBAAkB;CACpB;;AAED;EACG,gBAAgB;EAChB,kBAAkB;CACpB;;AAED;;EAEG,gBAAgB;EAChB,kBAAkB;CACpB;;AC9FD;EACG,eANkB;CAOpB;;AAED;ECAI,kBDlBgB;ECkBhB,kBCqDoC;EDrDpC,mBCqDmE;EFnDpE,cAAc;CAKhB;;AAPD;EGPM,aAAa;EACb,eAAe;EACf,YAAY;CACb;;AHQF;EAJH;IAKM,kBAAkB;GAEvB;CIgHA;;ACrID;EACE,aAAa;CACd;;AAED;EACC,0BAPuB;EAQvB,mBAAmB;EACnB,8BAAqB;EAArB,sBAAqB;EACrB,aAAa;EACZ,wBAAwB;CACzB;;AAED;EACC,8BAAqB;EAArB,sBAAqB;EACrB,cAAc;CACd;;AAED;EJHI,gBIG0B;EJH1B,kBCqDoC;EDrDpC,mBCqDmE;CGlDpC;;AAAnC;EFVM,aAAa;EACb,eAAe;EACf,YAAY;CACb;;AEQL;EJJI,uBKD4D;ELC5D,WIImB;EJJnB,YMA4D;ENA5D,uBOqFkB;EPrFlB,wBOqFkB;CHjFM;;AAE5B;EACC,mBAAmB;CACnB;;AAED;EACC,wBAAwB;EACxB,aAAa;EACb,cAAc;EACd,eAAe;EACf,mCAA2B;UAA3B,2BAA2B;EACxB,+BAAuB;UAAvB,uBAAuB;EACvB,4CAAoC;UAApC,oCAAoC;CAKvC;;AAZD;EASE,YAAY;EACZ,aAAa;CACb;;AAmBF,wBAAwB;AAdtB;EAgBA;IACE,0BAA0B;GD4I3B;EC1ID;IACE,0BAA0B;GD4I3B;EC1ID;IACE,0BAA0B;GD4I3B;EC1ID;IACE,0BAA0B;GD4I3B;CACF;;AC9JC;EAOA;IACE,0BAA0B;GDyL3B;ECvLD;IACE,0BAA0B;GDyL3B;ECvLD;IACE,0BAA0B;GDyL3B;ECvLD;IACE,0BAA0B;GDyL3B;CACF","file":"style.css","sourcesContent":["html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video, main {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\nimg,svg{\n\twidth: 100%;\n\tmax-width: 100%;\n\theight: auto;\n}\n\na{\n\tcolor: #000;\n\ttext-decoration: none;\n\ttransition: all 200ms;\n\n \t&:hover{\n\t cursor: pointer;\n\t color: #ff0000;\n \t}\n}\n\n*{\n\tposition: relative;\n\tbox-sizing: border-box;\n\tcolor: #000;\n}\n\nh1, h2, h3,\nh4, h5, h6,\np, li, a,\nth, td{\n   margin-bottom: 5px;\n   letter-spacing: 1px;\n}\n\nh1{\n   font-size: 28px;\n   line-height: 42px;\n}\n\nh2{\n   font-size: 26px;\n   line-height: 39px;\n}\n\nh3{\n   font-size: 24px;\n   line-height: 36px;\n}\n\nh4{\n   font-size: 22px;\n   line-height: 33px;\n}\n\nh5{\n   font-size: 20px;\n   line-height: 30px;\n}\n\nh6{\n   font-size: 18px;\n   line-height: 27px;\n}\n\np, li, a,\ntd{\n   font-size: 14px;\n   line-height: 21px;\n}\n","$susy: (\n   container: 1024px,\n   columns: 12,\n   gutters: 1/4,\n   math: fluid,\n   output: float,\n   gutter-position: inside,\n);\n\n// Brand Colors\n$brand-color: #B3740D;\n\n// Global Active Link Color - best to use a variable from Brand Colors\n$active-color: $brand-color;\n\na {\n   color: $active-color;\n}\n\n.container{\n   @include container();\n   padding: 15px;\n\n   @media (min-width: 1024px){\n      padding: 15px 0px;\n   }\n}\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video, main {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block;\n}\n\nbody {\n  line-height: 1;\n}\n\nol, ul {\n  list-style: none;\n}\n\nblockquote, q {\n  quotes: none;\n}\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\nimg, svg {\n  width: 100%;\n  max-width: 100%;\n  height: auto;\n}\n\na {\n  color: #000;\n  text-decoration: none;\n  transition: all 200ms;\n}\n\na:hover {\n  cursor: pointer;\n  color: #ff0000;\n}\n\n* {\n  position: relative;\n  box-sizing: border-box;\n  color: #000;\n}\n\nh1, h2, h3,\nh4, h5, h6,\np, li, a,\nth, td {\n  margin-bottom: 5px;\n  letter-spacing: 1px;\n}\n\nh1 {\n  font-size: 28px;\n  line-height: 42px;\n}\n\nh2 {\n  font-size: 26px;\n  line-height: 39px;\n}\n\nh3 {\n  font-size: 24px;\n  line-height: 36px;\n}\n\nh4 {\n  font-size: 22px;\n  line-height: 33px;\n}\n\nh5 {\n  font-size: 20px;\n  line-height: 30px;\n}\n\nh6 {\n  font-size: 18px;\n  line-height: 27px;\n}\n\np, li, a,\ntd {\n  font-size: 14px;\n  line-height: 21px;\n}\n\na {\n  color: #B3740D;\n}\n\n.container {\n  max-width: 1024px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 15px;\n}\n\n.container:after {\n  content: \" \";\n  display: block;\n  clear: both;\n}\n\n@media (min-width: 1024px) {\n  .container {\n    padding: 15px 0px;\n  }\n}\n\n* {\n  color: white;\n}\n\nbody {\n  background-color: #eb4a4b;\n  border-radius: 5px;\n  transition: color 30s;\n  color: white;\n  font-family: Sans-Serif;\n}\n\ndiv {\n  transition: color 20s;\n  color: purple;\n}\n\nbody {\n  max-width: 80em;\n  margin-left: auto;\n  margin-right: auto;\n}\n\nbody:after {\n  content: \" \";\n  display: block;\n  clear: both;\n}\n\nnav {\n  -moz-box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  width: 25%;\n  float: left;\n  padding-left: 0.83333%;\n  padding-right: 0.83333%;\n}\n\n#starter {\n  text-align: center;\n}\n\n#gulp-trans-wrapper {\n  background-color: white;\n  width: 250px;\n  height: 250px;\n  margin: 0 auto;\n  animation-name: gulpcolors;\n  animation-duration: 4s;\n  animation-iteration-count: infinite;\n}\n\n#gulp-trans-wrapper img {\n  width: 100%;\n  height: auto;\n}\n\n/* The animation code */\n@-webkit-keyframes gulpcolors {\n  0% {\n    background-color: #ffccf2;\n  }\n  50% {\n    background-color: #ccffcc;\n  }\n  75% {\n    background-color: #21ec72;\n  }\n  100% {\n    background-color: #ffccf2;\n  }\n}\n\n@-moz-keyframes gulpcolors {\n  0% {\n    background-color: #ffccf2;\n  }\n  50% {\n    background-color: #ccffcc;\n  }\n  75% {\n    background-color: #21ec72;\n  }\n  100% {\n    background-color: #ffccf2;\n  }\n}\n\n@-ms-keyframes gulpcolors {\n  0% {\n    background-color: #ffccf2;\n  }\n  50% {\n    background-color: #ccffcc;\n  }\n  75% {\n    background-color: #21ec72;\n  }\n  100% {\n    background-color: #ffccf2;\n  }\n}\n\n@keyframes gulpcolors {\n  0% {\n    background-color: #ffccf2;\n  }\n  50% {\n    background-color: #ccffcc;\n  }\n  75% {\n    background-color: #21ec72;\n  }\n  100% {\n    background-color: #ffccf2;\n  }\n}\n","// Used only for Start Kit Example\n\n\n$color-gulp-red: #eb4a4b;\n\n* {\n  color: white;\n}\n\nbody {\n\tbackground-color: $color-gulp-red;\n\tborder-radius: 5px;\n\ttransition:color 30s;\n\tcolor: white;\n  font-family: Sans-Serif;\n}\n\ndiv {\n\ttransition:color 20s; \n\tcolor: purple;\n}\n\nbody { @include container(80em); }\nnav { @include span(25%); }\n\n#starter {\n\ttext-align: center;\n}\n\n#gulp-trans-wrapper {\n\tbackground-color: white;\n\twidth: 250px;\n\theight: 250px;\n\tmargin: 0 auto;\n\tanimation-name: gulpcolors;\n    animation-duration: 4s;\n    animation-iteration-count: infinite;\n\timg {\n\t\twidth: 100%;\n\t\theight: auto;\n\t}\n}\n\n// keyframes mixin\n@mixin keyframes($name) {\n  @-webkit-keyframes #{$name} {\n    @content; \n  }\n  @-moz-keyframes #{$name} {\n    @content;\n  }\n  @-ms-keyframes #{$name} {\n    @content;\n  }\n  @keyframes #{$name} {\n    @content;\n  } \n}\n\n/* The animation code */\n@include keyframes(gulpcolors) {\n  0% {\n    background-color: #ffccf2;\n  }\n  50% {\n    background-color: #ccffcc;\n  }\n  75% {\n    background-color: #21ec72;\n  } \n  100% {\n    background-color: #ffccf2;\n  } \n}","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n"],"sourceRoot":"/source/"}